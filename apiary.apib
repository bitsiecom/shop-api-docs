FORMAT: 1A

# Bitsie Shop
Using the Bitsie Shop API, you can access all features available under your account via a RESTful API.

## Authentication

Bitsie Shop uses HTTP Basic Authentication. Provide your API Key ID as the basic auth username and your API Key Secret as the basic auth password.

`https://{API-KEY}:{API-SECRET}@api.shop.bitsie.com`

## HTTPS/SSL

All requests to Bitsie Shop must be made via https://

<span id="errors"></span>
## Errors 

If an expected error occurs, or the request requires additional user action, the Bitsie Shop API will respond with the appropriate non-200 status code. Error information will be included in the response.

    {
        "error" : { 
            "message" : "Invoice amount is required." 
        } 
    }

## Request Validation

Requests containing invalid data will respond with a 410 status code, and will contain an error message indicating the invalid data. Only a single invalid property will be identified in the response, so it is recommended that you validate requests prior to sending them to the Bitsie Shop API. See [Errors](#errors) for response format.

# Group Accounts


## Account [/account/{id}]
A single Account object. 

The Account resource has the following attributes: 

- id ... ID of the account

+ Parameters
    + id (integer, `1`) ... The id of the Account.

+ Model (application/json)
    
    ```js
    {
        "createdAt" : "2014-12-01 00:00:00"
    }
    ```
    
## Accounts Collection [/accounts]

+ Model (application/json)
    
    ```js
    {
        "meta" : {
            "offset":0,
            "limit":20,
            "sort":[["createdAt","DESC"]],
            "totalCount":2,
            "query":{}
        },
        "accounts" : [
            {
                "id" : 1,
                "status" : "active"
            },
            {
                "id" : 2,
                "status" : "suspended"
            }
        ]
    }
    ```
    
### List all Accounts [GET]
Retrieve all accounts in Bitsie Shop.

This method is only available to `administrator` roles.

+ Response 200
    
    [Accounts Collection][]

# Group Users

## User [/user/{id}]
A single User object. 

The User resource has the following attributes: 

- id
- ...


+ Parameters
    + id (integer, `1`) ... The id of the User.

+ Model (application/json)
    
    ```js
    {
        "firstName" : "John",
        "lastName" : "Doe"
    }
    ```

### Retrieve a Single User [GET]
+ Response 200
    
    [User][]

## User Collection [/users{?firstName}{?lastName}{?email}{?role}{?status}{?sort}{?order}]

+ Parameters
    * firstName (optional, string) ... User's first name
    * lastName (optional, string) ... User's last name
    * email (optional, string) ... User's email address
    * role (optional, string) ... Role of user
    * status (optional, string) ... Status of user record
        * active
        * suspended
    * sort (optional, string) ... Column/direction used to sort records. If you want to specify the sort order, add "+ASC" or "+DESC" after the column name. Separate multiple columsn using a comma.
        * Examples: 
            * &sort=lastName
            * &sort=lastName+DESC,firstName+ASC
            * &sort=lastName+DESC,firstName
            * &sort=lastName+DESC,firstName+ASC

+ Model (application/json)
    
    ```js
    {
        "firstName" : "John"
    }
    ```
    
### List all Users [GET]
Retrieve all users under your account.

This method is only available to `merchant` roles.

+ Response 200
    
    [User Collection][]
